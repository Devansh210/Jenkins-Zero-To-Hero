pipeline {
  agent {
    docker {
      image 'maven:3.8.7-eclipse-temurin-17'
      args '-v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  environment {
    SONAR_URL = "http://192.168.10.135:9000"
  }
stages {
    stage('Static Code Analysis - SonarQube') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh '''
              mvn clean verify sonar:sonar \
                -Dsonar.login=$SONAR_AUTH_TOKEN \
                -Dsonar.host.url=${SONAR_URL}
            '''
          }
        }
      }
    }

    stage('Credential Scanner - TruffleHog') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh '''
            mkdir -p trufflehog-reports

            docker run --rm -v $(pwd):/src trufflesecurity/trufflehog \
              filesystem /src --json > trufflehog-reports/trufflehog-report.json || true

            if grep -q "reason" trufflehog-reports/trufflehog-report.json; then
              echo "❌ Secrets detected by TruffleHog!"
              exit 1
            else
              echo "✅ No secrets detected."
            fi
          '''
        }
        archiveArtifacts artifacts: '**/trufflehog-reports/trufflehog-report.json', allowEmptyArchive: true
      }
    }

    stage('Maven Build') {
      steps {
        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
          sh 'mvn clean install'
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline execution finished.'
    }
    failure {
      echo '❌ Build failed. Check logs and scan reports.'
    }
    success {
      echo '✅ Build succeeded.'
    }
  }
}
