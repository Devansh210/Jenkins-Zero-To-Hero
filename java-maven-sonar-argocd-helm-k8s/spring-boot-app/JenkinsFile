pipeline {
  agent {
    docker {
      image 'maven:3.8.7-eclipse-temurin-17'
      args '-v /var/run/docker.sock:/var/run/docker.sock --group-add=$(stat -c %g /var/run/docker.sock)'
    }
  }
stage('Setup Docker') {
      steps {
        // Install Docker CLI in the container
        sh '''
          apt-get update -qq
          apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
          apt-get update -qq
          apt-get install -y docker-ce-cli
        '''
        // Verify Docker is accessible
        sh 'docker --version'
        sh 'docker ps'
      }
    }
  stages {
    stage('Checkout') {
      steps {
      dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app'){
        sh 'echo passed'
        sh 'docker --version || echo "Docker not found or not accessible"'
        sh 'id'  // This will show the user Jenkins is running as
        sh 'groups || echo "Unable to determine groups"'
        sh 'pwd'
        // git branch: 'main', url: 'https://github.com/Devansh210/Jenkins-Zero-To-Hero.git'
      }}
    }
    
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.10.135:9000"
      }
       steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
stage('Credential Scanner - TruffleHog') {
      steps {
        // Create a directory for scan results
        sh 'mkdir -p trufflehog-reports'
        // Run TruffleHog scan
        sh '''
          # Run TruffleHog with Docker-in-Docker
          docker run --rm \
            -v $(pwd):/src \
            trufflesecurity/trufflehog:latest \
            filesystem \
            --directory=/src \
            --json \
> trufflehog-reports/trufflehog-report.json || true
          # Check if secrets were found
          if grep -q "fingerprint" trufflehog-reports/trufflehog-report.json; then
            echo "⚠️ WARNING: Potential secrets detected by TruffleHog!"
            exit 1
          else
            echo "✅ No secrets detected by TruffleHog"
          fi
        '''
        // Archive the reports as artifacts in Jenkins
        archiveArtifacts artifacts: 'trufflehog-reports/*.json', allowEmptyArchive: true
      }
    }
  } // closes 'stages'
}   // closes 'pipeline'
